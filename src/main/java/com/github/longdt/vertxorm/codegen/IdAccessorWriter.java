package com.github.longdt.vertxorm.codegen;

import com.github.longdt.vertxorm.repository.IdAccessor;
import com.github.longdt.vertxorm.repository.SqlDialect;
import com.squareup.javapoet.*;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import java.io.IOException;

import static com.google.auto.common.GeneratedAnnotationSpecs.generatedAnnotationSpec;
import static com.squareup.javapoet.TypeSpec.interfaceBuilder;
import static javax.lang.model.element.Modifier.*;

public class IdAccessorWriter {
    private final Filer filer;
    private final Elements elements;
    private final SourceVersion sourceVersion;
    private final Types types;

    IdAccessorWriter(ProcessingEnvironment processingEnv) {
        this.filer = processingEnv.getFiler();
        this.elements = processingEnv.getElementUtils();
        this.sourceVersion = processingEnv.getSourceVersion();
        this.types = processingEnv.getTypeUtils();
    }

    void writeIdAccessor(EntityDeclaration entityDeclaration, SqlDialect dialect) throws IOException {
        String idAccessorName = entityDeclaration.targetType().getSimpleName().toString() + Constant.ID_ACCESSOR;
        TypeSpec.Builder factory =
                interfaceBuilder(idAccessorName)
                        .addOriginatingElement(entityDeclaration.targetType());
        generatedAnnotationSpec(
                elements,
                sourceVersion,
                CodeGenProcessor.class,
                "Do not edit this file")
                .ifPresent(factory::addAnnotation);
        factory.addModifiers(PUBLIC);
        addSuperinterface(factory, entityDeclaration);
        var packageName = elements.getPackageOf(entityDeclaration.targetType()).getQualifiedName().toString();
        TypeSpecBuilders.addInterfaceInstanceField(factory, ClassName.get(packageName, idAccessorName));
        addGetIdMethod(factory, entityDeclaration);
        addSetIdMethod(factory, entityDeclaration);
        addDb2IdValueMethod(factory, entityDeclaration, dialect);
        addId2DbValueMethod(factory, entityDeclaration);
        JavaFile.builder(packageName, factory.build())
                .skipJavaLangImports(true)
                .build()
                .writeTo(filer);
    }

    private void addId2DbValueMethod(TypeSpec.Builder factory, EntityDeclaration entityDeclaration) {
        var converterOpt = entityDeclaration.idField().converter();
        if (converterOpt.isEmpty()) {
            return;
        }

        var methodBuilder = MethodSpec.methodBuilder("id2DbValue")
                .addModifiers(DEFAULT, PUBLIC)
                .addAnnotation(Override.class)
                .addParameter(ClassName.get(entityDeclaration.idField().javaType()), "id")
                .returns(Object.class);
        methodBuilder.addStatement("return $T.$L.convertToDatabaseColumn(id)",
                ClassName.bestGuess(entityDeclaration.targetType().toString() + Constant.TABLE),
                NamingStrategies.camelToScreamSnake(AnnotationHelper.getSimpleClassName(converterOpt.get())));
        factory.addMethod(methodBuilder.build());
    }

    private void addDb2IdValueMethod(TypeSpec.Builder factory, EntityDeclaration entityDeclaration, SqlDialect dialect) {
        var idType = entityDeclaration.idField().javaType();
        String primitiveType;
        if (entityDeclaration.autoId() && dialect == SqlDialect.MYSQL && (primitiveType = needCastIdValue(idType)) != null) {
            var methodBuilder = MethodSpec.methodBuilder("db2IdValue")
                    .addModifiers(DEFAULT, PUBLIC)
                    .addAnnotation(Override.class)
                    .addParameter(Object.class, "value")
                    .returns(ClassName.get(entityDeclaration.idField().javaType()));
            methodBuilder.addStatement("return ((Number) value).$LValue()", primitiveType);
            factory.addMethod(methodBuilder.build());
        }
    }

    private String needCastIdValue(TypeMirror typeMirror) {
        switch (typeMirror.getKind()) {
            case BYTE: return "byte";
            case SHORT: return "short";
            case INT: return "int";
            case DECLARED:
                if (types.isSameType(typeMirror, AnnotationHelper.getTypeMirror(elements, Byte.class))) {
                    return "byte";
                } else if (types.isSameType(typeMirror, AnnotationHelper.getTypeMirror(elements, Short.class))) {
                    return "short";
                } else if (types.isSameType(typeMirror, AnnotationHelper.getTypeMirror(elements, Integer.class))) {
                    return "int";
                }
            default:
                return null;
        }
    }

    private void addGetIdMethod(TypeSpec.Builder factory, EntityDeclaration entityDeclaration) {
        var methodBuilder = MethodSpec.methodBuilder("getId")
                .addModifiers(DEFAULT, PUBLIC)
                .addAnnotation(Override.class)
                .addParameter(ClassName.get(entityDeclaration.targetType()), "entity")
                .returns(ClassName.get(entityDeclaration.idField().javaType()))
                .addStatement("return entity.get$L()", MethodNames.toPropertyMethodSuffix(entityDeclaration.idField().fieldName()));

        factory.addMethod(methodBuilder.build());
    }

    private void addSetIdMethod(TypeSpec.Builder factory, EntityDeclaration entityDeclaration) {
        var methodBuilder = MethodSpec.methodBuilder("setId")
                .addModifiers(DEFAULT, PUBLIC)
                .addAnnotation(Override.class)
                .addParameter(ClassName.get(entityDeclaration.targetType()), "entity")
                .addParameter(ClassName.get(entityDeclaration.idField().javaType()), "id")
                .addStatement("entity.set$L(id)", MethodNames.toPropertyMethodSuffix(entityDeclaration.idField().fieldName()));

        factory.addMethod(methodBuilder.build());
    }

    private void addSuperinterface(TypeSpec.Builder factory, EntityDeclaration entityDeclaration) {
        factory.addSuperinterface(ParameterizedTypeName.get(
                ClassName.get(IdAccessor.class),
                ClassName.get(entityDeclaration.idField().javaType()),
                ClassName.get(entityDeclaration.targetType())
        ));
    }
}
